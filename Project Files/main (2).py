# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jdsmfE7SuRqBTl4zEo1oRyNyOQ766zJV
"""

from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
from translate import Translator
import gradio as gr

# Load IBM Granite model
model_id = "ibm-granite/granite-3.3-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_id)
model = AutoModelForCausalLM.from_pretrained(model_id)
generator = pipeline("text-generation", model=model, tokenizer=tokenizer)

# Initialize translator: any input language -> English
translator_to_en = Translator(to_lang="en")

# Translate user input before processing
def translate_input(user_input):
    try:
        return translator_to_en.translate(user_input)
    except Exception:
        return user_input  # fallback if translation fails

# Ask model
def ask_model(prompt):
    response = generator(prompt, max_new_tokens=200, do_sample=True, temperature=0.7)[0]["generated_text"]
    return response.replace(prompt, "").strip()

# 1. Symptoms Identifier
def symptoms_identifier(symptoms):
    symptoms_en = translate_input(symptoms)
    prompt = f"The user has the following symptoms: {symptoms_en}. What disease or condition could this indicate?"
    return ask_model(prompt)

# 2. Home Remedies
def home_remedies(disease):
    disease_en = translate_input(disease)
    prompt = f"What are some effective home remedies for {disease_en} using herbs, diet, or lifestyle changes?"
    return ask_model(prompt)

# 3. Medication Info
def medication_info(disease):
    disease_en = translate_input(disease)
    prompt = f"What are the commonly used medications (over-the-counter or prescribed) for {disease_en}? Provide general information only."
    return ask_model(prompt)

# 4. Disease Encyclopedia
def disease_info(disease):
    disease_en = translate_input(disease)
    prompt = f"Provide a detailed explanation of {disease_en}: causes, symptoms, prevention, and treatment."
    return ask_model(prompt)

# 5.Patient chat
def patient_chat(query):
    query_en = translate_input(query)
    prompt = (
        f"As a virtual health assistant, provide a clear, kind, and informative response to the user's medical question: "
        f"'{query_en}'. Include relevant medical facts, acknowledge limitations, and suggest when to seek professional care."
    )
    return ask_model(prompt)


# Gradio Interface
with gr.Blocks() as demo:
    gr.Markdown("## ðŸ¤– HealthAI - Your Intelligent Healthcare Assistant")

    with gr.Tab("ðŸ©º Symptoms Identifier"):
        input1 = gr.Textbox(label="Enter symptoms (any language)")
        output1 = gr.Textbox(label="Possible condition")
        btn1 = gr.Button("Analyze")
        btn1.click(fn=symptoms_identifier, inputs=input1, outputs=output1)

    with gr.Tab("ðŸŒ¿ Home Remedies"):
        input2 = gr.Textbox(label="Enter disease (any language)")
        output2 = gr.Textbox(label="Natural Remedies")
        btn2 = gr.Button("Get Remedies")
        btn2.click(fn=home_remedies, inputs=input2, outputs=output2)

    with gr.Tab("ðŸ’Š Medication Info"):
        input3 = gr.Textbox(label="Enter disease (any language)")
        output3 = gr.Textbox(label="Medication Info")
        btn3 = gr.Button("Get Info")
        btn3.click(fn=medication_info, inputs=input3, outputs=output3)

    with gr.Tab("ðŸ“š Disease Encyclopedia"):
        input4 = gr.Textbox(label="Enter disease (any language)")
        output4 = gr.Textbox(label="Full Info")
        btn4 = gr.Button("Explain Disease")
        btn4.click(fn=disease_info, inputs=input4, outputs=output4)
    with gr.Tab("ðŸ’¬ Patient Chat"):
        input5 = gr.Textbox(label="Ask any health-related question")
        output5 = gr.Textbox(label="Empathetic, factual answer")
        btn5 = gr.Button("Ask")
        btn5.click(fn=patient_chat, inputs=input5, outputs=output5)


demo.launch()

!pip install transformers accelerate gradio translate